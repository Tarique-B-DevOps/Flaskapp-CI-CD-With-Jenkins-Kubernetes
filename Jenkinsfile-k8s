pipeline {

// Set global environment variables 
  environment {
    registry = "mtariqueb/flask_todoapp"
    registryCredential = 'tarique-dockerhub'
    dockerImage = ''
    release = 'prod-release-${BUILD_NUMBER}'
    projectKey = 'Flask-App-Analysis'
  }
  agent any
  stages {
  // SonarQube Code Quality Analysis
    stage('SonarQube Analysis') {
        steps {
            script {
                def scannerHome = tool 'sonarqube-scanner';
                withSonarQubeEnv("sonar-server-gcp") {
                sh "${scannerHome}/bin/sonar-scanner \
                -Dsonar.projectKey=${projectKey} \
                -Dsonar.sources=."
               }
           }
       }
   }
   // Quality Gate to abort the pipeline in case the STATUS is "ERROR"
   stage ("SonarQube Quality Gate"){
        steps {
            timeout (time: 2 , unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
            }
        }
    
    }
   // Build Docker image from Dockerfile present at the root of repository
    stage ('Build Docker Image'){
        steps {
            script{
                dockerImage = docker.build registry + ":$BUILD_NUMBER"

            }
        
        }
    }
// Push the image to dockerhub repository 
    stage ('Push Image to Dockerhub'){
        steps {
            script {
                docker.withRegistry( '', registryCredential ) {
                dockerImage.push()

                }
            }
        }
    }
// set current imagetag with current build number
    stage ('Update Image Tag in Helm Values') {
        steps {
              sh "sed -i 's+BUILD_NUM_TAG+${BUILD_NUMBER}+g' helm-chart/values.yaml"
        
        }
    
    }

// Transfer helm chart configurations to the Master Node 
    stage ('Transfer Helm Chart to Main Node ') {
        steps {
            script {
                  sshagent(['df574488-5eff-47d2-8849-7926bad4f00c']) {
                  sh 'scp -o StrictHostKeyChecking=no -r helm-chart ubuntu@54.84.141.250:/home/ubuntu/k8sConfigs/'
            }
          }
        }
      }
// Install or upgrade the helm chart on kubernetes cluster

    stage ('Deploy Helm Chart on Kubernetes Cluster') {
    agent {label 'MASTER-MAIN'}
        steps {
            script {
                try {
                    sh "helm install ${release} ~/k8sConfigs/helm-chart"

                }catch(error) {
                    sh "helm upgrade ${release} ~/k8sConfigs/helm-chart"

                    }

                }
            }
        }    
    }
}